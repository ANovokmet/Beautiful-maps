{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "ImageSettings.svelte",
    "PaletteInput.svelte",
    "StylePicker.svelte"
  ],
  "sourcesContent": [
    "<script>\n    import { onMount, setContext } from 'svelte';\n    import { writable } from 'svelte/store';\n    import panzoom from 'panzoom';\n\n    import StylePicker from './StylePicker.svelte';\n    import StyleRenderer from './StyleRenderer.svelte';\n    import PaletteSettings from './PaletteSettings.svelte';\n    import ImageSettings from './ImageSettings.svelte';\n    import PositionSettings from './PositionSettings.svelte';\n    import Tabs from './Tabs.svelte';\n    import Tab from './Tab.svelte';\n\n    import { classes } from './defaults';\n    import { getCountriesFromSvg, clip, removeImageFromSvg, xmlns } from './countries';\n    import { debounce, delegated, loadSvg } from './utils';\n\n    let mapContainer;\n    let mapContent;\n    let renderer;\n    let panZoomInstance;\n    let countries = {};\n    let selected = null;\n    let hovering = null;\n    let selectedCountry = null;\n    let activeLeftTab = 'Classes';\n    let activeRightTab = 'Style';\n\n    export let mapUrl;\n\n    const palette$ = writable(getSavedPalette());\n    const changedEvent$ = writable(null);\n\n    let defaultPosition = {\n        scale: 3.815,\n        x: -4348.21,\n        y: -185.77\n    }\n    let defaultClasses = {};\n    for(const id in classes) {\n        const source = classes[id];\n        defaultClasses[id] = {\n            id: source.id,\n            enabled: source.enabled,\n            style: { ...source.style }\n        }\n    }\n\n    function resetState() {\n        position = defaultPosition;\n        for(const id in countries) {\n            const target = countries[id];\n\n            target.enabled = true;\n            target.style = {};\n            target.image = null;\n        }\n\n        for(const id in defaultClasses) {\n            const source = defaultClasses[id];\n            const target = classes[id];\n\n            target.enabled = source.enabled;\n            target.style = source.style;\n        }\n        renderer.renderAll(countries, classes);\n        console.log('Loaded');\n    }\n\n    function saveState() {\n        console.log('Saving...');\n        const state = {\n            position: position,\n            countries: {},\n            classes: {}\n        };\n        // save classes\n        for(const id in countries) {\n            const source = countries[id];\n            state.countries[id] = {\n                enabled: source.enabled,\n                style: source.style,\n                image: source.image\n            }\n        }\n        // save classes\n        for(const id in classes) {\n            const source = classes[id];\n            state.classes[id] = {\n                enabled: source.enabled,\n                style: source.style\n            }\n        }\n\n        localStorage.setItem('state', JSON.stringify(state));\n    }\n\n    function loadState() {\n        const state = JSON.parse(localStorage.getItem('state'));\n        position = state.position;\n        for(const id in state.countries) {\n            const source = state.countries[id];\n            const target = countries[id];\n\n            target.enabled = source.enabled;\n            target.style = { ...target.style, ...source.style };\n            target.image = source.image ? { ...target.image, ...source.image } : null;\n        }\n\n        for(const id in state.classes) {\n            const source = state.classes[id];\n            const target = classes[id];\n\n            target.enabled = source.enabled;\n            target.style = { ...target.style, ...source.style };\n        }\n        renderer.renderAll(countries, classes);\n        console.log('Loaded');\n    }\n\n    setContext('ctx', {\n        palette$,\n        changedEvent$,\n        onChanged: (event) => $changedEvent$ = event,\n        countries,\n        classes\n    });\n\n    function getSavedPalette() {\n        const str = localStorage.getItem('palette');\n        if(str) {\n            return JSON.parse(str);\n        } else {\n            return ['#00429d', '#2e59a8', '#4771b2', '#5d8abd', '#73a2c6', '#8abccf', '#a5d5d8', '#c5eddf', '#ffffe0'];\n        }\n    }\n\n    $: {\n        localStorage.setItem('palette', JSON.stringify($palette$));\n    }\n\n    const mapContentLoad$ = loadSvg(mapUrl);\n\n    const onTransform = debounce(e => {\n        const transform = e.getTransform();\n        if(position.x !== transform.x)\n            position.x = transform.x;\n        if(position.y !== transform.y)\n            position.y = transform.y;\n        if(position.scale !== transform.scale)\n            position.scale = transform.scale;\n    }, 250);\n\n    onMount(async () => {\n        mapContent = await mapContentLoad$;\n        mapContainer.appendChild(mapContent);\n        panZoomInstance = window.pan = panzoom(mapContent, {\n            bounds: true,\n            boundsPadding: 0.5,\n            smoothScroll: false\n        });\n        panZoomInstance.on('transform', onTransform);\n\n        getCountriesFromSvg(mapContent, countries);\n        setTransform(position);\n        loadState();\n\n        mapContent.addEventListener('click', delegated(target => {\n            const id = target.id;\n            selected && selected.removeAttribute('data-selected');\n            selected = target;\n            target.dataset.selected = true;\n            selectedCountry = countries[id];\n            setSelection(selectedCountry);\n        }));\n\n        mapContent.addEventListener('mouseover', delegated(target => {\n            hovering && hovering.removeAttribute('data-hover');\n            target.dataset.hover = true;\n            hovering = target;\n        }));\n    });\n\n    let selectionRect = null;\n    function setSelection(config) {\n        const target = config.element;\n\n        if(!selectionRect) {\n            selectionRect = document.createElementNS(xmlns, 'rect');\n            selectionRect.classList.add('selection');\n            mapContent.appendChild(selectionRect);\n        }\n\n        const rect = target.getBBox();\n\n        selectionRect.setAttribute('x', rect.x);\n        selectionRect.setAttribute('y', rect.y);\n        selectionRect.setAttribute('height', rect.height);\n        selectionRect.setAttribute('width', rect.width);\n    }\n\n    function handleKeydown(e) {\n        let c = String.fromCharCode(e.keyCode);\n        switch(c) {\n            case '1':\n            case '2':\n            case '3':\n            case '4':\n            case '5':\n            case '6':\n            case '7':\n            case '8':\n            case '9':\n                const color = $palette$[+c-1];\n                if(selectedCountry && color) {\n                    selectedCountry.style.fill = color;\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    function applyImage({imageConfig, url}) {\n        selectedCountry.image = clip(`clip-${selectedCountry.id}`, selectedCountry.element, url, imageConfig, mapContent);\n        console.log(selectedCountry.image)\n    }\n\n    function removeImage({imageConfig}) {\n        removeImageFromSvg(imageConfig);\n        selectedCountry.image = null;\n    }\n\n    export function setTransform({x, y, scale}) {\n        const transform = panZoomInstance.getTransform();\n        transform.scale = scale;\n        transform.x = x;\n        transform.y = y;\n        panZoomInstance.moveBy(0, 0);\n    }\n\n    window.setTransform = setTransform;\n\n    let position = { ...defaultPosition };\n    $: {\n        if(panZoomInstance) {\n            setTransform(position);\n        }\n    }\n\n    function toSvgDocumentSpace(clientX, clientY) {\n        var point = mapContent.createSVGPoint();\n        point.x = clientX;\n        point.y = clientY;\n\n        var ctm = mapContent.getScreenCTM();\n        var inverse = ctm.inverse();\n        var p = point.matrixTransform(inverse);\n        return {\n            x: p.x,\n            y: p.y\n        };\n    }\n\n    let autosave = true;\n    let saveDebounced = debounce(() => saveState(), 2500);\n    $: {\n        if(autosave && $changedEvent$) {\n            saveDebounced();\n        }\n    }\n</script>\n\n<style>\n    #map-container, .map {\n        overflow: hidden;\n        height: 100%;\n    }\n\n    .navbar {\n        padding: .4rem;\n    }\n\n    .panel {\n        box-shadow: 0 2px 10px rgba(48,55,66,.10);\n    }\n\n    .map {\n        grid-area: content;\n    }\n\n    .header {\n        grid-area: header;\n    }\n\n    .controls-right {\n        grid-area: controls-right; \n        min-width: 260px;\n    }\n\n    .sidebar {\n        grid-area: sidebar;\n        display: flex;\n        justify-content: space-between;\n        flex-direction: column;\n        align-items: center;\n    }\n\n    .actions {\n        display: flex;\n        flex-direction: column;\n    }\n\n    .controls-left {\n        grid-area: controls-left;\n        width: 260px;\n        overflow-y: scroll;\n    }\n\n    .grid {\n        display: grid;\n        width: 100%;\n        height: 100%;\n        grid-gap: .4rem;\n        grid-template-rows: auto auto 1fr;\n        grid-template-columns: auto auto auto 1fr;\n        grid-template-areas:\n            \"header  header        header  header        \"\n            \"sidebar controls-left content controls-right\"\n            \"sidebar controls-left content controls-right\";\n    }\n</style>\n\n<svelte:body on:keydown={handleKeydown}/>\n\n<div class=\"grid pb-2\">\n    <header class=\"header navbar bg-primary\">\n        <section class=\"navbar-section\">\n            <a href=\"https://github.com/ANovokmet/Beautiful-maps\" class=\"navbar-brand mr-2 text-bold text-light\">Beautiful-maps</a>\n        </section>\n        <section class=\"navbar-section\">\n            <button class=\"btn btn-action btn-sm ml-1 tooltip tooltip-bottom\" class:active=\"{activeRightTab == 'Style'}\" on:click=\"{() => activeRightTab = 'Style'}\" data-tooltip=\"Style\">\n                <i class=\"material-icons\">brush</i>\n            </button>\n            <button class=\"btn btn-action btn-sm ml-1 tooltip tooltip-bottom\" class:active=\"{activeRightTab == 'Image'}\" on:click=\"{() => activeRightTab = 'Image'}\" data-tooltip=\"Image\">\n                <i class=\"material-icons\">add_photo_alternate</i>\n            </button>\n            <button class=\"btn btn-action btn-sm ml-1\" class:active=\"{activeRightTab == 'Shortcuts'}\" on:click=\"{() => activeRightTab = 'Shortcuts'}\" title=\"Shortcuts\">\n                <i class=\"material-icons\">keyboard</i>\n            </button>\n        </section>\n    </header>\n\n    <div class=\"sidebar pl-2\">\n        <div class=\"actions\">\n            <button class=\"btn btn-action btn-primary btn-sm mb-1 tooltip tooltip-right\" class:active=\"{activeLeftTab == 'Classes'}\" on:click=\"{() => activeLeftTab = 'Classes'}\"  data-tooltip=\"Classes\">\n                <i class=\"material-icons\">style</i>\n            </button>\n            <button class=\"btn btn-action btn-primary btn-sm mb-1 tooltip tooltip-right\" class:active=\"{activeLeftTab == 'Position'}\" on:click=\"{() => activeLeftTab = 'Position'}\"  data-tooltip=\"Position\">\n                <i class=\"material-icons\">settings_overscan</i>\n            </button>\n            <button class=\"btn btn-action btn-primary btn-sm  tooltip tooltip-right\" class:active=\"{activeLeftTab == 'Palette'}\" on:click=\"{() => activeLeftTab = 'Palette'}\"  data-tooltip=\"Palette\">\n                <i class=\"material-icons\">gradient</i>\n            </button>\n        </div>\n\n        <div class=\"actions\">\n            <a class=\"btn btn-action btn-primary btn-sm tooltip tooltip-right\" href=\"https://github.com/ANovokmet/Beautiful-maps#README\" target=\"_blank\"  data-tooltip=\"Help\">\n                <i class=\"material-icons\">help_center</i>\n            </a>\n        </div>\n    </div>\n\n    <div class=\"map\">\n        <div id=\"map-container\" class=\"panel\" bind:this={mapContainer}></div>\n    </div>\n\n    <div class=\"controls-right col-2 pr-2\">\n        <Tabs activeTab={activeRightTab} hideHeader=\"true\">\n            <Tab label=\"Style\">\n                <div class=\"panel bg-light p-2\">\n                    {#if selectedCountry}\n                    <StylePicker selector=\".{selectedCountry.id}\" bind:config={selectedCountry}></StylePicker>\n                    {:else}\n                        Select a country\n                    {/if}\n                </div>\n            </Tab>\n            <Tab label=\"Image\">\n                <div class=\"panel bg-light p-2\">\n                    {#if selectedCountry}\n                    <ImageSettings bind:imageConfig={selectedCountry.image} on:apply={e => applyImage(e.detail)} on:remove={e => removeImage(e.detail)}></ImageSettings>\n                    {:else}\n                        Select a country\n                    {/if}\n                </div>\n            </Tab>\n            <Tab label=\"Shortcuts\">\n                <div class=\"panel bg-light p-2\">\n                    <p><code>1-9</code> apply shades of current palette</p>\n                </div>\n            </Tab>\n            <!-- layers -->\n        </Tabs>\n    </div>\n\n    <div class=\"controls-left hide-scrollbar\">\n        <Tabs activeTab={activeLeftTab} hideHeader=\"true\">\n            <Tab label=\"Classes\">\n                {#each Object.keys(classes) as klass (klass)}\n                    <div class=\"panel bg-light p-2 mb-2\">\n                        <StylePicker selector=\".{klass}\" config={classes[klass]}></StylePicker>\n                    </div>\n                {/each}\n            </Tab>\n            <Tab label=\"Position\">\n                <div class=\"panel bg-light p-2\">\n                    <PositionSettings bind:scale={position.scale} bind:x={position.x} bind:y={position.y} bind:autosave={autosave} on:reset={resetState}></PositionSettings>\n                </div>\n            </Tab>\n            <Tab label=\"Palette\">\n                <div class=\"panel bg-light p-2\">\n                    <PaletteSettings></PaletteSettings>\n                </div>\n            </Tab>\n        </Tabs>\n    </div>\n</div>\n<StyleRenderer bind:this={renderer} classes={classes} countries={countries}></StyleRenderer>\n",
    "<script>\r\n    import { createEventDispatcher, getContext } from 'svelte';\r\n\r\n    export let imageConfig;\r\n    let url;\r\n\r\n    const dispatch = createEventDispatcher();\r\n    const { onChanged } = getContext('ctx');\r\n\r\n    function apply() {\r\n        if(url) {\r\n            dispatch('apply', { imageConfig, url });\r\n            url = '';\r\n        } else {\r\n            console.error('No url entered');\r\n        }\r\n    }\r\n\r\n    function remove() {\r\n        if(imageConfig) {\r\n            dispatch('remove', { imageConfig });\r\n        }\r\n    }\r\n\r\n    function changeScale(scale) {\r\n        const image = imageConfig.imageElement;\r\n\r\n        const width = imageConfig.originalWidth * scale;\r\n        const height = imageConfig.originalHeight * scale;\r\n\r\n        const x = imageConfig.originX - width / 2;\r\n        const y = imageConfig.originY - height / 2;\r\n        \r\n        image.setAttribute('x', x);\r\n        image.setAttribute('y', y);\r\n        image.setAttribute('width', width);\r\n        image.setAttribute('height', height);\r\n    }\r\n\r\n    function changeKeepRatio(keepRatio) {\r\n        const image = imageConfig.imageElement;\r\n\r\n        if(keepRatio) {\r\n            image.setAttribute('preserveAspectRatio', 'xMidYMid meet');\r\n        } else {\r\n            image.setAttribute('preserveAspectRatio', 'none');\r\n            imageConfig.scale = 1;\r\n        }\r\n    }\r\n\r\n    $: {\r\n        if(imageConfig) {\r\n            changeKeepRatio(imageConfig.keepRatio);\r\n            changeScale(imageConfig.scale);\r\n        }\r\n    }\r\n</script>\r\n\r\n<style>\r\n    .img-container {\r\n        width: 100%;\r\n        height: 100px;\r\n    }\r\n    img {\r\n        max-width: 100%;\r\n        max-height: 100%;\r\n    }\r\n\r\n    .btns-apart {\r\n        display: flex;\r\n        justify-content: space-between;\r\n    }\r\n    \r\n    .form-pair {\r\n        display: flex;\r\n    }\r\n</style>\r\n\r\n<div class=\"form\">\r\n    {#if imageConfig}\r\n        <div class=\"img-container\">\r\n            <img src=\"{imageConfig.href}\" alt=\"image preview\">\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label class=\"form-label label-sm\">scale</label>\r\n            <div class=\"form-pair\">\r\n                <input class=\"form-input input-sm\" type=\"range\" bind:value={imageConfig.scale} min=\"0\" max=\"4\" step=\"0.1\">\r\n                <input class=\"form-input input-sm\" type=\"number\" bind:value={imageConfig.scale} min=\"0\" max=\"4\" step=\"0.1\">\r\n            </div>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label class=\"form-checkbox label-sm\">\r\n                <input type=\"checkbox\" bind:checked={imageConfig.keepRatio} on:change={e => changeKeepRatio(e.target.checked)}>\r\n                <i class=\"form-icon\"></i> keep ratio\r\n            </label>\r\n        </div>\r\n    {/if}\r\n    <div class=\"form-group\">\r\n        <label class=\"form-label label-sm\">image url</label>\r\n        <div class=\"form-pair\">\r\n            <input class=\"form-input input-sm\" type=\"text\" bind:value={url}>\r\n        </div>\r\n    </div>\r\n    <div class=\"btns-apart\">\r\n        <button class=\"btn btn-primary\" on:click={apply}>Apply</button>\r\n        {#if imageConfig}\r\n        <button class=\"btn btn-primary\" on:click={remove}>Remove</button>\r\n        {/if}\r\n    </div>\r\n</div>",
    "<script>\r\n    import { getContext, createEventDispatcher } from \"svelte\";\r\n\r\n    const dispatch = createEventDispatcher();\r\n    const { palette, palette$ } = getContext('ctx');\r\n\r\n    export let selected;\r\n\r\n    function onSelected(color) {\r\n        selected = color;\r\n        dispatch('select', { color });\r\n    }\r\n</script>\r\n<style>\r\n    .palette {\r\n        background: rgb(255, 255, 255);\r\n        display: flex;\r\n        height: 1.4rem;\r\n        border: .05rem solid #bcc3ce;\r\n        padding: .3rem;\r\n    }\r\n\r\n    .palette-step {\r\n        height: 100%;\r\n        display: block;\r\n        flex-grow: 1;\r\n    }\r\n\r\n    .selected {\r\n        outline: 2px solid rgb(87 85 217);\r\n        z-index: 1;\r\n    }\r\n</style>\r\n<div class=\"palette\">\r\n    {#each $palette$ as step}\r\n    <div class=\"palette-step\" style=\"background-color: {step}\" class:selected={step === selected} on:click={() => onSelected(step)}>\r\n    </div>\r\n    {/each}\r\n</div>",
    "<script>\r\n    import { getContext } from 'svelte';\r\n    import PaletteInput from './PaletteInput.svelte';\r\n    export let config;\r\n    export let selector;\r\n\r\n    const { onChanged } = getContext('ctx');\r\n    $: {\r\n        requestAnimationFrame(() => {\r\n            onChanged({\r\n                id: config.id,\r\n                config: config,\r\n                style: config.style\r\n            });\r\n        })\r\n    }\r\n\r\n    let options = [\r\n        {\r\n            label: 'opacity',\r\n            styleProperty: 'opacity',\r\n            type: 'range',\r\n            min: 0,\r\n            max: 1,\r\n            step: 0.1\r\n        },\r\n        {\r\n            label: 'fill',\r\n            styleProperty: 'fill',\r\n            type: 'palette'\r\n        },\r\n        {\r\n            label: 'stroke',\r\n            styleProperty: 'stroke',\r\n            type: 'color'\r\n        },\r\n        {\r\n            label: 'stroke width',\r\n            styleProperty: 'stroke-width',\r\n            type: 'range',\r\n            min: 0,\r\n            max: 4,\r\n            step: 0.1\r\n        }\r\n    ];\r\n    $: {\r\n        if(config.options) {\r\n            options = config.options;\r\n        }\r\n    }\r\n</script>\r\n\r\n<style>\r\n    .form-pair {\r\n        display: flex;\r\n    }\r\n\r\n    .form-pair [type=\"number\"] {\r\n        width: 30%;\r\n    }\r\n</style>\r\n\r\n<div class=\"form\">\r\n    <div class=\"form-group\">\r\n        <label class=\"form-switch\">\r\n            <input type=\"checkbox\" bind:checked={config.enabled}>\r\n            <i class=\"form-icon\"></i><h6 title=\"{config.hint}\">{selector}</h6>\r\n        </label>\r\n    </div>\r\n    {#each options as opt}\r\n        <div class=\"form-group\">\r\n            <label class=\"form-label label-sm\">{opt.label}</label>\r\n            {#if opt.type === 'range'}\r\n                <div class=\"form-pair\">\r\n                    <input class=\"form-input input-sm\" type=\"range\" bind:value={config.style[opt.styleProperty]} min=\"{opt.min}\" max=\"{opt.max}\" step=\"{opt.step}\">\r\n                    <input class=\"form-input input-sm\" type=\"number\" bind:value={config.style[opt.styleProperty]} min=\"{opt.min}\" max=\"{opt.max}\" step=\"{opt.step}\">\r\n                </div>\r\n            {:else if opt.type === 'palette'}\r\n                <input class=\"form-input input-sm\" type=\"color\" bind:value={config.style[opt.styleProperty]}>\r\n                <PaletteInput selected={config.style[opt.styleProperty]} on:select=\"{e => config.style[opt.styleProperty] = e.detail.color}\"></PaletteInput>\r\n            {:else if opt.type === 'color'}\r\n                <input class=\"form-input input-sm\" type=\"color\" bind:value={config.style[opt.styleProperty]}>\r\n            {/if}\r\n        </div>\r\n    {/each}\r\n</div>"
  ],
  "names": [],
  "mappings": "AAkRI,4BAAc,CAAE,IAAI,cAAC,CAAC,AAClB,QAAQ,CAAE,MAAM,CAChB,MAAM,CAAE,IAAI,AAChB,CAAC,AAED,OAAO,cAAC,CAAC,AACL,OAAO,CAAE,KAAK,AAClB,CAAC,AAED,MAAM,cAAC,CAAC,AACJ,UAAU,CAAE,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,AAC7C,CAAC,AAED,IAAI,cAAC,CAAC,AACF,SAAS,CAAE,OAAO,AACtB,CAAC,AAED,OAAO,cAAC,CAAC,AACL,SAAS,CAAE,MAAM,AACrB,CAAC,AAED,eAAe,cAAC,CAAC,AACb,SAAS,CAAE,cAAc,CACzB,SAAS,CAAE,KAAK,AACpB,CAAC,AAED,QAAQ,cAAC,CAAC,AACN,SAAS,CAAE,OAAO,CAClB,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,aAAa,CAC9B,cAAc,CAAE,MAAM,CACtB,WAAW,CAAE,MAAM,AACvB,CAAC,AAED,QAAQ,cAAC,CAAC,AACN,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,AAC1B,CAAC,AAED,cAAc,cAAC,CAAC,AACZ,SAAS,CAAE,aAAa,CACxB,KAAK,CAAE,KAAK,CACZ,UAAU,CAAE,MAAM,AACtB,CAAC,AAED,KAAK,cAAC,CAAC,AACH,OAAO,CAAE,IAAI,CACb,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,QAAQ,CAAE,KAAK,CACf,kBAAkB,CAAE,IAAI,CAAC,IAAI,CAAC,GAAG,CACjC,qBAAqB,CAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CACzC,mBAAmB,CACf,8CAA8C;YAC9C,8CAA8C;YAC9C,8CAA8C,AACtD,CAAC;AC/QD,cAAc,eAAC,CAAC,AACZ,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,KAAK,AACjB,CAAC,AACD,GAAG,eAAC,CAAC,AACD,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,IAAI,AACpB,CAAC,AAED,WAAW,eAAC,CAAC,AACT,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,aAAa,AAClC,CAAC,AAED,UAAU,eAAC,CAAC,AACR,OAAO,CAAE,IAAI,AACjB,CAAC;AC7DD,QAAQ,eAAC,CAAC,AACN,UAAU,CAAE,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAC9B,OAAO,CAAE,IAAI,CACb,MAAM,CAAE,MAAM,CACd,MAAM,CAAE,MAAM,CAAC,KAAK,CAAC,OAAO,CAC5B,OAAO,CAAE,KAAK,AAClB,CAAC,AAED,aAAa,eAAC,CAAC,AACX,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,KAAK,CACd,SAAS,CAAE,CAAC,AAChB,CAAC,AAED,SAAS,eAAC,CAAC,AACP,OAAO,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CACjC,OAAO,CAAE,CAAC,AACd,CAAC;ACsBD,UAAU,4BAAC,CAAC,AACR,OAAO,CAAE,IAAI,AACjB,CAAC,AAED,wBAAU,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAC,CAAC,AACxB,KAAK,CAAE,GAAG,AACd,CAAC"
}