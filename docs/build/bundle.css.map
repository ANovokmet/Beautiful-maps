{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "ImageSettings.svelte",
    "PaletteInput.svelte",
    "StylePicker.svelte"
  ],
  "sourcesContent": [
    "<script>\n    import { onMount, setContext } from 'svelte';\n    import { writable } from 'svelte/store';\n    import throttle from 'lodash.throttle';\n    import panzoom from 'panzoom';\n\n    import StylePicker from './StylePicker.svelte';\n    import StyleRenderer from './StyleRenderer.svelte';\n    import PaletteInput from './PaletteInput.svelte';\n    import PaletteSettings from './PaletteSettings.svelte';\n    import ImageSettings from './ImageSettings.svelte';\n    import PositionSettings from './PositionSettings.svelte';\n    import Tabs from './Tabs.svelte';\n    import Tab from './Tab.svelte';\n\n    import { classes } from './defaults';\n\n    let mapContainer;\n    let mapContent;\n    var countries = {};\n    let selected = null;\n    let hovering = null;\n    let selectedCountry = null;\n    let panZoomInstance;\n    export let mapUrl;\n\n    const palette$ = writable(['#00429d', '#2e59a8', '#4771b2', '#5d8abd', '#73a2c6', '#8abccf', '#a5d5d8', '#c5eddf', '#ffffe0']);\n    const changedEvent$ = writable(null);\n\n    const onChanged = throttle((event) => {\n        $changedEvent$ = event;\n    }, 400, { leading: true, trailing: true });\n\n    setContext('ctx', {\n        palette: ['#00429d', '#2e59a8', '#4771b2', '#5d8abd', '#73a2c6', '#8abccf', '#a5d5d8', '#c5eddf', '#ffffe0'],\n        palette$,\n        changedEvent$,\n        onChanged\n    });\n\n    let svgFetch$ = fetch(mapUrl)\n        .then(response => response.text())\n        .then(html => {\n            var parser = new DOMParser();\n            var doc = parser.parseFromString(html, 'image/svg+xml');\n            const svg = doc.getElementsByTagName('svg')[0];\n            return svg;\n        })\n        .catch((err) => console.error('Failed to fetch page: ', err));\n\n    onMount(async () => {\n        mapContent = await svgFetch$;\n        mapContainer.appendChild(mapContent);\n\n        for (const child of mapContent.children) {\n            //child.setAttribute()\n            if (child.tagName === 'title' || child.id === 'ocean') continue;\n\n            const titleElement = child.querySelector('title');\n            child.dataset.country = child.id;\n            countries[child.id] = {\n                id: child.id,\n                element: child,\n                title: titleElement ? titleElement.textContent : child.id,\n                hint: titleElement ? titleElement.textContent : child.id,\n                enabled: true,\n                style: {\n                    fill: child.style.fill,\n                    fillOpacity: child.style.fillOpacity,\n                    stroke: child.style.stroke,\n                    strokeWidth: child.style.strokeWidth\n                }\n            };\n        }\n\n        // limited recognition\n        const limitxx = mapContent.querySelectorAll('.limitxx, .unxx');\n        for (const child of limitxx) {\n            const titleElement = child.querySelector('title');\n            child.dataset.country = child.id;\n            countries[child.id] = {\n                id: child.id,\n                element: child,\n                title: titleElement ? titleElement.textContent : child.id,\n                style: {\n                    fill: child.style.fill,\n                    fillOpacity: child.style.fillOpacity,\n                    stroke: child.style.stroke,\n                    strokeWidth: child.style.strokeWidth\n                }\n            };\n        }\n\n        panZoomInstance = window.pan = panzoom(mapContent, {\n            bounds: true,\n            boundsPadding: 0.5,\n            smoothScroll: false\n        });\n\n        panZoomInstance.on('transform', e => {\n            const transform = e.getTransform();\n            position.x = transform.x;\n            position.y = transform.y;\n            position.scale = transform.scale; \n        });\n        setTransform(position);\n\n        mapContent.addEventListener('click', delegated(target => {\n            const id = target.id;\n\n            selected && selected.removeAttribute('data-selected');\n            selected = target;\n            target.dataset.selected = true;\n            selectedCountry = countries[id];\n            console.log(countries[id]);\n        }));\n\n        mapContent.addEventListener('mouseover', delegated(target => {\n            hovering && hovering.removeAttribute('data-hover');\n            target.dataset.hover = true;\n            hovering = target;\n        }));\n    });\n\n    function delegated(fn) {\n        return function (event) {\n            let target = event.target.closest('[data-country]');\n            if (target && target.dataset['country']) {\n                fn(target, event);\n            }\n        };\n    }\n\n    function handleKeydown(e) {\n        let c = String.fromCharCode(e.keyCode);\n        switch(c) {\n            case '1':\n            case '2':\n            case '3':\n            case '4':\n            case '5':\n            case '6':\n            case '7':\n            case '8':\n            case '9':\n                const color = $palette$[+c-1];\n                if(selectedCountry && color) {\n                    selectedCountry.style.fill = color;\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    function applyImage(data) {\n        const element = data.config.element;\n        clip(`clip-${data.config.id}`, element, data.url, data.config);\n    }\n\n    const xmlns = 'http://www.w3.org/2000/svg';\n\tfunction clip(clipId, pathElement, imageHref, config) {\n        const rect = pathElement.getBBox();\n\t\tconst clipPath = cloneToPath(pathElement);\n\t\tclipPath.id = clipId;\n\n\t\tconst image = document.createElementNS(xmlns, 'image');\n\t\timage.setAttribute('clip-path', `url(#${clipId})`);\n\t\timage.setAttribute('href', imageHref);\n\t\timage.setAttribute('height', rect.height);\n        image.setAttribute('width', rect.width);\n\t\timage.setAttribute('x', rect.x);\n\t\timage.setAttribute('y', rect.y);\n        image.setAttribute('preserveAspectRatio', 'none');\n\n        mapContent.appendChild(clipPath);\n        // pathElement.insertAdjacentElement('beforebegin', image);\n        mapContent.appendChild(image);\n\n        config.scale = 1;\n        config.keepRatio = false;\n        config.imageOriginX = rect.x + rect.width / 2;\n        config.imageOriginY = rect.y + rect.height / 2;\n        config.imageOriginalWidth = rect.width;\n        config.imageOriginalHeight = rect.height;\n\n        config.imageElement = image;\n        config.clipPathElement = clipPath;\n        config.appliedImageHref = imageHref;\n\t}\n\n\tfunction cloneToPath(element) {\n\t\tconst clipPath = document.createElementNS(xmlns, 'clipPath');\n\t\tif(element.tagName === 'path') {\n\t\t\tclipPath.appendChild(element.cloneNode());\n\t\t} else {\n\t\t\tfor(const node of element.querySelectorAll('path')) {\n\t\t\t\tclipPath.appendChild(node.cloneNode());\n\t\t\t}\n\t\t}\n\t\treturn clipPath;\n    }\n    \n    export function setTransform({x, y, scale}) {\n        const transform = window.pan.getTransform();\n        transform.scale = scale;\n        transform.x = x;\n        transform.y = y;\n        window.pan.moveBy(0, 0);\n    }\n\n    let position = {\n        scale: 3.815,\n        x: -4348.21,\n        y: -185.77\n    };\n    $: {\n        if(panZoomInstance) {\n            setTransform(position);\n        }\n    }\n\n</script>\n\n<style>\n    #map-container, .map {\n        overflow: hidden;\n        height: 100%;\n    }\n\n    .grow {\n        flex-grow: 1;\n    }\n\n    .column {\n        padding: .4rem;\n    }\n    \n    main {\n        padding: .4rem;\n    }\n    .navbar {\n        padding: .4rem;\n    }\n\n    .panel {\n        box-shadow: 0 2px 10px rgba(48,55,66,.10);\n    }\n</style>\n\n<svelte:body on:keydown={handleKeydown}/>\n<header class=\"navbar bg-primary\">\n    <section class=\"navbar-section\">\n        <a href=\"/\" class=\"navbar-brand mr-2 text-bold text-light\">Beautiful-maps</a>\n    </section>\n    <section class=\"navbar-section\">\n        <button class=\"btn btn-sm\">Shortcuts</button>\n        <a href=\"https://github.com/ANovokmet/Beautiful-maps\" class=\"btn btn-sm\">GitHub</a>\n    </section>\n</header>\n<main class=\"\">\n    <div class=\"columns\" style=\"height: 512px\">\n        <div class=\"column map\">\n            <div id=\"map-container\" class=\"panel\" bind:this={mapContainer}></div>\n        </div>\n        <div class=\"column col-2\" style=\"min-width: 260px\">\n            {#if selectedCountry}\n            <Tabs>\n                <Tab label=\"Style\">\n                    <div class=\"panel bg-light p-2\">\n                        <StylePicker selector=\".{selectedCountry.id}\" bind:config={selectedCountry}></StylePicker>\n                    </div>\n                </Tab>\n                <Tab label=\"Image\">\n                    <div class=\"panel bg-light p-2\">\n                        <ImageSettings bind:config={selectedCountry} on:apply={e => applyImage(e.detail)}></ImageSettings>\n                    </div>\n                </Tab>\n                <!-- layers -->\n            </Tabs>\n            {/if}\n        </div>\n    </div>\n    \n    <Tabs>\n        <Tab label=\"Classes\">\n            <div class=\"columns\">\n                {#each Object.keys(classes) as klass}\n                    <div class=\"column\">\n                        <div class=\"panel bg-light p-2\">\n                            <StylePicker selector=\".{klass}\" bind:config={classes[klass]}></StylePicker>\n                        </div>\n                    </div>\n                {/each}\n            </div>\n        </Tab>\n        <Tab label=\"Position\">\n            <div class=\"panel bg-light p-2\">\n                <PositionSettings bind:scale={position.scale} bind:x={position.x} bind:y={position.y}></PositionSettings>\n            </div>\n        </Tab>\n        <Tab label=\"Palette\">\n            <div class=\"panel bg-light p-2\">\n                <PaletteSettings></PaletteSettings>\n            </div>\n        </Tab>\n    </Tabs>\n</main>\n<StyleRenderer configs={classes} countries={countries}></StyleRenderer>\n",
    "<script>\r\n    import { createEventDispatcher, getContext } from 'svelte';\r\n\r\n    export let config;\r\n    let url;\r\n\r\n    const dispatch = createEventDispatcher();\r\n    const { onChanged } = getContext('ctx');\r\n\r\n    function apply() {\r\n        if(url) {\r\n            dispatch('apply', { config, url });\r\n            url = '';\r\n        } else {\r\n            console.error('No url entered');\r\n        }\r\n    }\r\n\r\n    function remove() {\r\n        if(config) {\r\n\r\n        }\r\n    }\r\n\r\n    function changeScale(scale) {\r\n        const image = config.imageElement;\r\n\r\n        const width = config.imageOriginalWidth * scale;\r\n        const height = config.imageOriginalHeight * scale;\r\n\r\n        const x = config.imageOriginX - width / 2;\r\n        const y = config.imageOriginY - height / 2;\r\n        \r\n        image.setAttribute('x', x);\r\n        image.setAttribute('y', y);\r\n        image.setAttribute('width', width);\r\n        image.setAttribute('height', height);\r\n    }\r\n\r\n    function changeKeepRatio(keepRatio) {\r\n        const image = config.imageElement;\r\n\r\n        if(keepRatio) {\r\n            image.setAttribute('preserveAspectRatio', 'xMidYMid meet');\r\n        } else {\r\n            image.setAttribute('preserveAspectRatio', 'none');\r\n            config.scale = 1;\r\n        }\r\n    }\r\n\r\n    $: {\r\n        if(config.imageElement) {\r\n            changeKeepRatio(config.keepRatio);\r\n            changeScale(config.scale);\r\n        }\r\n    }\r\n</script>\r\n\r\n<style>\r\n    .img-container {\r\n        width: 100%;\r\n        height: 100px;\r\n    }\r\n    img {\r\n        max-width: 100%;\r\n        max-height: 100%;\r\n    }\r\n\r\n    .btns-apart {\r\n        display: flex;\r\n        justify-content: space-between;\r\n    }\r\n    \r\n    .form-pair {\r\n        display: flex;\r\n    }\r\n</style>\r\n\r\n<div class=\"form\">\r\n    {#if config.appliedImageHref}\r\n        <div class=\"img-container\">\r\n            <img src=\"{config.appliedImageHref}\" alt=\"image preview\">\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label class=\"form-label label-sm\">scale</label>\r\n            <div class=\"form-pair\">\r\n                <input class=\"form-input input-sm\" type=\"range\" bind:value={config.scale} min=\"0\" max=\"4\" step=\"0.1\">\r\n                <input class=\"form-input input-sm\" type=\"number\" bind:value={config.scale} min=\"0\" max=\"4\" step=\"0.1\">\r\n            </div>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label class=\"form-checkbox label-sm\">\r\n                <input type=\"checkbox\" bind:checked={config.keepRatio}>\r\n                <i class=\"form-icon\"></i> keep ratio\r\n            </label>\r\n        </div>\r\n    {/if}\r\n    <div class=\"form-group\">\r\n        <label class=\"form-label label-sm\">image url</label>\r\n        <div class=\"form-pair\">\r\n            <input class=\"form-input input-sm\" type=\"text\" bind:value={url}>\r\n        </div>\r\n    </div>\r\n    <div class=\"btns-apart\">\r\n        <button class=\"btn btn-primary\" on:click={apply}>Apply</button>\r\n        {#if config.appliedImageHref}\r\n        <button class=\"btn btn-primary\" on:click={remove}>Remove</button>\r\n        {/if}\r\n    </div>\r\n</div>",
    "<script>\r\n    import { getContext, createEventDispatcher } from \"svelte\";\r\n\r\n    const dispatch = createEventDispatcher();\r\n    const { palette, palette$ } = getContext('ctx');\r\n\r\n    export let selected;\r\n\r\n    function onSelected(color) {\r\n        selected = color;\r\n        dispatch('select', { color });\r\n    }\r\n</script>\r\n<style>\r\n    .palette {\r\n        background: rgb(255, 255, 255);\r\n        display: flex;\r\n        height: 1.4rem;\r\n        border: .05rem solid #bcc3ce;\r\n        padding: .3rem;\r\n    }\r\n\r\n    .palette-step {\r\n        height: 100%;\r\n        display: block;\r\n        flex-grow: 1;\r\n    }\r\n\r\n    .selected {\r\n        outline: 2px solid rgb(87 85 217);\r\n        z-index: 1;\r\n    }\r\n</style>\r\n<div class=\"palette\">\r\n    {#each $palette$ as step}\r\n    <div class=\"palette-step\" style=\"background-color: {step}\" class:selected={step === selected} on:click={() => onSelected(step)}>\r\n    </div>\r\n    {/each}\r\n</div>",
    "<script>\r\n    import { getContext } from 'svelte';\r\n    import PaletteInput from './PaletteInput.svelte';\r\n    export let config;\r\n    export let selector;\r\n\r\n    const { onChanged } = getContext('ctx');\r\n    \r\n    const defaults = {\r\n        opacity: 1,\r\n        fill: '#cccccc',\r\n        'fill-opacity': 1,\r\n        stroke: '#ffffff',\r\n        'stroke-width': 0.5\r\n    };\r\n\r\n\tfunction onFillSelected(event) {\r\n        config.style.fill = event.detail.color;\r\n    }\r\n    \r\n    $: {\r\n        onChanged({\r\n            id: config.id,\r\n            style: config.style\r\n        });\r\n    }\r\n</script>\r\n\r\n<style>\r\n    .form-pair {\r\n        display: flex;\r\n    }\r\n</style>\r\n\r\n<div class=\"form\">\r\n    <div class=\"form-group\">\r\n        <label class=\"form-switch\">\r\n            <input type=\"checkbox\" bind:checked={config.enabled}>\r\n            <i class=\"form-icon\"></i><h6 title=\"{config.hint}\">{selector}</h6>\r\n        </label>\r\n    </div>\r\n    <div class=\"form-group\">\r\n        <label class=\"form-label label-sm\">opacity</label>\r\n        <div class=\"form-pair\">\r\n            <input class=\"form-input input-sm\" type=\"range\" bind:value={config.style.opacity} min=\"0\" max=\"1\" step=\"0.1\">\r\n            <input class=\"form-input input-sm\" type=\"number\" bind:value={config.style.opacity} min=\"0\" max=\"1\" step=\"0.1\">\r\n        </div>\r\n    </div>\r\n    <div class=\"form-group\">\r\n        <label class=\"form-label label-sm\">fill</label>\r\n        <input class=\"form-input input-sm\" type=\"color\" bind:value={config.style.fill}>\r\n        <PaletteInput selected={config.style.fill} on:select=\"{e => onFillSelected(e)}\"></PaletteInput>\r\n    </div>\r\n    <div class=\"form-group\">\r\n        <label class=\"form-label label-sm\">stroke</label>\r\n        <input class=\"form-input input-sm\" type=\"color\" bind:value={config.style.stroke}>\r\n    </div>\r\n    <div class=\"form-group\">\r\n        <label class=\"form-label label-sm\">strokeWidth</label>\r\n        <div class=\"form-pair\">\r\n            <input class=\"form-input input-sm\" type=\"range\" bind:value={config.style['stroke-width']} min=\"0\" max=\"4\" step=\"0.1\">\r\n            <input class=\"form-input input-sm\" type=\"number\" bind:value={config.style['stroke-width']} min=\"0\" max=\"4\" step=\"0.1\">\r\n        </div>\r\n    </div>\r\n</div>"
  ],
  "names": [],
  "mappings": "AAiOI,6BAAc,CAAE,IAAI,eAAC,CAAC,AAClB,QAAQ,CAAE,MAAM,CAChB,MAAM,CAAE,IAAI,AAChB,CAAC,AAMD,OAAO,eAAC,CAAC,AACL,OAAO,CAAE,KAAK,AAClB,CAAC,AAED,IAAI,eAAC,CAAC,AACF,OAAO,CAAE,KAAK,AAClB,CAAC,AACD,OAAO,eAAC,CAAC,AACL,OAAO,CAAE,KAAK,AAClB,CAAC,AAED,MAAM,eAAC,CAAC,AACJ,UAAU,CAAE,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,AAC7C,CAAC;AC5LD,cAAc,eAAC,CAAC,AACZ,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,KAAK,AACjB,CAAC,AACD,GAAG,eAAC,CAAC,AACD,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,IAAI,AACpB,CAAC,AAED,WAAW,eAAC,CAAC,AACT,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,aAAa,AAClC,CAAC,AAED,UAAU,eAAC,CAAC,AACR,OAAO,CAAE,IAAI,AACjB,CAAC;AC7DD,QAAQ,eAAC,CAAC,AACN,UAAU,CAAE,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAC9B,OAAO,CAAE,IAAI,CACb,MAAM,CAAE,MAAM,CACd,MAAM,CAAE,MAAM,CAAC,KAAK,CAAC,OAAO,CAC5B,OAAO,CAAE,KAAK,AAClB,CAAC,AAED,aAAa,eAAC,CAAC,AACX,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,KAAK,CACd,SAAS,CAAE,CAAC,AAChB,CAAC,AAED,SAAS,eAAC,CAAC,AACP,OAAO,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CACjC,OAAO,CAAE,CAAC,AACd,CAAC;ACFD,UAAU,cAAC,CAAC,AACR,OAAO,CAAE,IAAI,AACjB,CAAC"
}